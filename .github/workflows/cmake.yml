name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: install valgrind
      run: sudo apt-get install -y valgrind
      
    - name: Cache suppressions logs
      id: cache_suppression_logs
      uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/build/MemcheckLogs
        key: ${{ runner.os }}-memchecklogs      
        
    - name: check cached files
      run: ls -lR ${{github.workspace}}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: MemTest
      id: memcheck_test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail      
      run: ctest -C ${{env.BUILD_TYPE}} -T MemCheck -VV -LE skip
      #continue-on-error: true
      
    - name: rename memcheck logs
      if: ${{ failure() }} && steps.memcheck_test.outcome == 'failure'
      working-directory: ${{github.workspace}}/scripts
      run: |
       mkdir ${{github.workspace}}/build/MemcheckLogs
       ./copy_and_rename_failed_memcheck_logs.py ${{github.workspace}}/build ${{github.workspace}}/build/MemcheckLogs
       
    - name: publish memcheck logs as artifacts
      if: ${{ failure() }} && steps.memcheck_test.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: memcheck-logs
        path: ${{github.workspace}}/build/MemcheckLogs
